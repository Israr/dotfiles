syntax on
set nocompatible 
"set t_Co=16
colorscheme desert
"colorscheme solarized
"colorscheme molokai
"let g:molokai_original = 1
"let g:rehash256 = 1

set background=dark
set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
" Set to auto read when a file is changed from the outside
filetype off                  " required
filetype plugin on
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Bundle 'jistr/vim-nerdtree-tabs'
call vundle#end()            " required

set autoread
" Fast saving
nmap <leader>w :w!<cr>
"map g :Ag 

"setup pathogen
execute pathogen#infect()

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" enable powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

set laststatus=2
"set statusline=\ %{HasPaste()}%F%m%r%y\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l
set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline). Useful with powerline
set mouse=a
set nu " show line numbers
set rnu " show relative line numbers
set cursorline
"hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
set showmatch           " highlight matching [{()}]
set wildmenu            " visual autocomplete for command menu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


"map <C-b> :shell<CR>
"map <C-b> :!./run.sh local<CR>
map <C-b> :FlowRun<CR>
" keep search matches in middle
map n nzzzv
map N Nzzzv
"comment/uncomment : NERDComment
map ' <leader>cb
map " <leader>cu
"Easy motion key mappings
map  <Leader><Leader>w <Plug>(easymotion-bd-w)
nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
map  <Leader><Leader>f <Plug>(easymotion-bd-f)
nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)

map <leader>nt  :NERDTreeTabsToggle<CR>
map <leader>v  :tabnew ~/.vim/vimrc<CR>
"map <leader>t  :tabnext<CR>
"map <leader>tn :tabnew<cr>
"for tab navigation. You may also use gt to navigate tabs
map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>

set viminfo^=%

map ! :shell<CR>  

"line/column marker
nnoremap <Leader>c :set cursorcolumn!<CR>
nnoremap <Leader>r :set rnu! cursorline! <CR>
" highlight last inserted text
nnoremap gV `[v`]

set runtimepath^=~/.vim/bundle/ag
" Replace tabs with spaces "
set expandtab
" Make tab 4 space wide
set tabstop=4
set shiftwidth=4
set autoindent
set incsearch
set hlsearch
" turn off highlighted search 
nnoremap <leader><space> :nohlsearch<CR> 
vmap "  :s/\%V\(.*\)\%V/"\1"/<CR>
vmap '  :s/\%V\(.*\)\%V/'\1'/<CR>
command! Reload so $MYVIMRC "reload vimrc
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

"jump to the last position when reopening a file
if has("autocmd")
   au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


"tricks
"sort items
"map <leader>st  .,/^$/-1!sort

