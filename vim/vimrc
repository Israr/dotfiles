" vim: set ft=vim sw=4 ts=4 sts=4 et tw=78 foldlevel=0 foldmethod=marker:
syntax on
set nocompatible 
set encoding=UTF-8
"set t_Co=16
set t_Co=256
set cursorline
set foldmethod=syntax
set foldlevelstart=20
set nu                                          " show line numbers
set rnu                                         " show relative line numbers
set ttyfast                                     " for faster redraws etc
set autoread                                    " refresh if changed
set expandtab                                   " indents <Tab> as spaces
set timeout timeoutlen=1000 ttimeoutlen=100

"set mousemodel=extend
colorscheme desert
"colorscheme molokai
"colorscheme solarized
"let g:molokai_original = 1
"let g:rehash256 = 1
" provide tab completion for files under current directory 
set path=**
set background=dark
set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
"set autochdir
set runtimepath^=~/.vim/bundle/ag
" Make tab 4 space wide
set tabstop=4
set shiftwidth=4
set autoindent
set incsearch
set hlsearch
" Set to auto read when a file is changed from the outside
filetype off                  " required
filetype plugin on
set rtp+=~/.vim/bundle/Vundle.vim
" add angular brackets to match pairs (% toggles between matchpair)
set matchpairs+=<:>
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'liuchengxu/vim-which-key'
"Plugin 'Valloric/YouCompleteMe'
"commandT provides bufexplorer functionality
"Plugin 'jlanzarotta/bufexplorer'
Plugin 'majutsushi/tagbar'
Plugin 'Shougo/unite.vim'
"For searching using Ack command
Plugin 'mileszs/ack.vim'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
"icons
"Plugin 'ryanoasis/vim-devicons'
" for commenting
Plugin 'scrooloose/nerdcommenter'
"Plugin 'Shougo/denite.nvim'
"Plugin 'roxma/nvim-yarp'
"Plugin 'roxma/vim-hug-neovim-rpc'
Plugin 'Shougo/vimfiler.vim'
Plugin 'sheerun/vim-polyglot'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'Yggdroot/indentLine'
Plugin 'easymotion/vim-easymotion'
"import or drop (Vimport Vimdrop) python packages
Plugin 'prakashdanish/vimport'
Plugin 'jonmorehouse/vim-flow'
Plugin 'tpope/vim-surround'
"Plugin 'iangmiao/auto-pairs'
"Plugin 'Shougo/vimproc.vim'
"Plugin 'Shougo/vimshell.vim'
"https://github.com/Shougo/deoplete.nvim
" orange colorscheme
"Plugin 'ayu-theme/ayu-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" CtrlP buffer management, Provides C-P, CtrlP, and CtrlPBuffer commands
Plugin 'ctrlpvim/ctrlp.vim'

" Auto completion
if has('nvim')
  Plugin 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
  Plugin 'kristijanhusak/defx-icons'
  Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  let g:deoplete#enable_at_startup = 1
  inoremap <silent> <Leader><Tab> <C-r>=MyLeaderTabfunc()<CR>
  Plugin 'deoplete-plugins/deoplete-jedi'
else
" requires python3
  Plugin 'Shougo/denite.nvim'
  Plugin 'Shougo/deoplete.nvim'
  Plugin 'Shougo/defx.nvim'
  Plugin 'kristijanhusak/defx-icons'
  Plugin 'roxma/nvim-yarp'
  Plugin 'roxma/vim-hug-neovim-rpc'
  Plugin 'deoplete-plugins/deoplete-jedi'
  let g:deoplete#enable_at_startup = 1
endif
Plugin 'Shougo/neosnippet.vim'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'Shougo/neopairs.vim'

if has('nvim')
"Plugin 'python-mode/python-mode'
end
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'dbeniamine/cheat.sh-vim'
" airline configuration {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_powerline_fonts=1 
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
" }}}
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

let g:indentLine_color_term = 239
"let g:indentLine_char = 'c'

" Fast saving
nmap <leader>w :w!<cr>
"map g :Ag 

"setup pathogen
execute pathogen#infect()

" NeoPairs {{{
let g:neopairs#enable=1
let g:neopairs#auto_delimiter = 1
let g:neopairs#pairs={'[' : ']',  '(' : ')',  '{' : '}',  '`' : '`',  '"' : ':'}
" }}}

" Plugin key-mappings for neosnippets. {{{
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
call deoplete#custom#option('auto_complete_delay', 100)
" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" For conceal markers.
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif

"}}}

"function! BufPopup()
"endfunction
" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

"Move cursor to middle of the line
function! s:Gm()
  execute 'normal! ^'
  let first_col = virtcol('.')
  execute 'normal! g_'
  let last_col  = virtcol('.')
  execute 'normal! ' . (first_col + last_col) / 2 . '|'
endfunction

nnoremap <silent> gm :call <SID>Gm()<CR>
onoremap <silent> gm :call <SID>Gm()<CR>

"accelerated motions with alt+hjkl
noremap <M-l> 4l
noremap <M-h> 4h
noremap <M-j> 4j
noremap <M-k> 4k

" map semi-colon to colon
nnoremap <silent> <leader> :WhichKey '\'<CR>

"automatically close pairs quotes, brackets, etc.
"inoremap " ""<left>
"inoremap ' ''<left>
"inoremap ( ()<left>
"inoremap [ []<left>
"inoremap { {}<left>

function! FindInc()
  let oldPath=&path
  set path=$PWD/**

  exe ":find " t:newIncSw

"Will do this just in time when needed
"  let t:newIncSw=expand('%:p')

  let &path=oldPath
endfun

function! CIncSw()
  " Switch from *.c* to *.h* and vice versa

  if exists("t:oldIncSw") && expand("%:t:r") == fnamemodify(t:oldIncSw, ":t:r")
    let t:newIncSw=t:oldIncSw
    let t:oldIncSw=expand("%:p")
    exe "e " t:newIncSw
    return 0
  endif

  if match(expand("%"), '\.c') > 0
    let t:newIncSw=substitute(expand("%:t"), '\.c\(.*\)', '.h', "")
  elseif match(expand("%"), "\\.h") > 0
    let t:newIncSw=substitute(expand("%:t"), '\.h\(.*\)', '.cpp', "")
  endif

  call FindInc()
endfun


" enable powerline (doesnt work for nvim)
if has('nvim')
    "echo "no powerline"
else
"python3 from powerline.vim import setup as powerline_setup
"python3 powerline_setup()
"python3 del powerline_setup
end

function! ShowSpaces(...)  
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction


set laststatus=2
"set statusline=\ %{HasPaste()}%F%m%r%y\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l
set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline). Useful with powerline
set mouse=a
"hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
set showmatch           " highlight matching [{()}]
set wildmenu            " visual autocomplete for command menu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
"vim filer
"map <F3> :VimFiler -explorer -force-hide<CR>
map <leader>nt  :NERDTreeTabsToggle<CR>
"map <F3>  :NERDTreeTabsToggle<CR>

map <leader>o  :VimFiler<CR>
map <leader>b  :Buffers<CR>
map <Space>b  :Buffers<CR>
map <Space>l  :Lines<CR>
"map <Space>d  :<CR>
"close buffer
map <leader>q  :bd<CR>
map <leader>t  :Tags<CR>
"map <leader>f  :Files<CR>
"fast window switching
map <F5> :call CIncSw()<CR>
map <F6> :bnext<CR>
map <F4> :bd<CR>
nmap <F8> o<Esc>
"nmap <CR><CR> o<ESC>
"map <C-b> :shell<CR>
"map <C-b> :!./run.sh local<CR>
map <C-b> :FlowRun<CR>
" keep search matches in middle
map n nzzzv
map N Nzzzv
"comment/uncomment : NERDComment
"map ' <leader>cb
"map " <leader>cu
map  <Leader><Leader>t :TagbarToggle<CR>
"Easy motion key mappings
"map  <Leader><Leader>w <Plug>(easymotion-bd-w)
nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
"map  <Leader><Leader>f <Plug>(easymotion-bd-f)
nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)

map <leader><leader>v  :e ~/.vim/vimrc<CR>
map <leader><leader>r  :e ~/roku/roku.sh<CR>
map <leader><leader>h  :History<CR>
"map <leader>t  :tabnext<CR>
"map <leader>tn :tabnew<cr>
"for tab navigation. You may also use gt to navigate tabs
map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>
set viminfo^=%

if has('nvim')
    map ! :terminal<CR>a
    tnoremap <Esc> <C-\><C-n>
    tnoremap <C-v><Esc> <Esc>
else
    map ! :shell<CR>  
end

if has('terminal')
    nmap <F12> :terminal<CR>
else
    nmap <F12> :shell<CR>
end
"line/column marker
nnoremap <Leader>c :set cursorcolumn!<CR>
nnoremap <Leader>r :set rnu! cursorline! <CR>
" highlight last inserted text
nnoremap gV `[v`]

" turn off highlighted search 
nnoremap <leader><space> :nohlsearch<CR> 
vmap "  :s/\%V\(.*\)\%V/"\1"/<CR>
vmap '  :s/\%V\(.*\)\%V/'\1'/<CR>
command! Reload so $MYVIMRC "reload vimrc
command! MakeTags !ctags -R .
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END
au BufRead,BufNewFile *.brs setfiletype basic

"jump to the last position when reopening a file
if has("autocmd")
   au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
augroup MyAutoCmd
  autocmd!
augroup END

autocmd MyAutoCmd ColorScheme *  highlight TabLineFill guifg=skyblue gui=NONE ctermfg=117 cterm=NONE
autocmd MyAutoCmd ColorScheme *  highlight TabLineSel  guifg=lightgoldenrod2 gui=bold ctermfg=186 cterm=bold
autocmd MyAutoCmd ColorScheme *  highlight TabLineFill guifg=skyblue gui=NONE ctermfg=117 cterm=NONE

source ~/.vim/vimrc_work
source ~/.vim/vimrc_utils
source ~/.vim/vimik_defx.vim
"source ~/.vim/vimik_proj.vim
source ~/.vim/functions.vim

"source ~/.vim/plugins/perforce.vim

"tricks
"sort items
"map <leader>st  .,/^$/-1!sort
" %s/\s/+$//e
